import { useState, useEffect } from "react";
import { EyeIcon } from "../components/Icons";

const EyeSlashIcon = ({ className }) => (
  <svg
    className={className}
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"
    />
  </svg>
);

function DarkModeToggle() {
  const [on, setOn] = useState(() => {
    try {
      return localStorage.getItem("darkMode") === "true";
    } catch (e) {
      return false;
    }
  });

  useEffect(() => {
    try {
      if (on) {
        document.documentElement.classList.add("dark");
        localStorage.setItem("darkMode", "true");
      } else {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("darkMode", "false");
      }
    } catch (e) {
      // noop
    }
  }, [on]);

  return (
    <button
      type="button"
      onClick={() => setOn(!on)}
      aria-pressed={on}
      className="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/80 dark:bg-transparent border border-gray-200 dark:border-transparent shadow-sm"
      title={on ? "Switch to light mode" : "Switch to dark mode"}
    >
      {on ? (
        <svg
          className="w-5 h-5 text-yellow-400 icon-current"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M12 3v2M12 19v2M4.2 4.2l1.4 1.4M18.4 18.4l1.4 1.4M1 12h2M21 12h2M4.2 19.8l1.4-1.4M18.4 5.6l1.4-1.4"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
          <circle
            cx="12"
            cy="12"
            r="4"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
        </svg>
      ) : (
        <svg
          className="w-5 h-5 text-gray-700 icon-current"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
        </svg>
      )}
    </button>
  );
}

// Dispatch a global event when dark mode changes so parent components can react
// (we keep DarkModeToggle self-contained but notify the page).
// Note: DarkModeToggle already writes localStorage and toggles the `dark` class.

export default function Login() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [isDark, setIsDark] = useState(() => {
    try {
      return localStorage.getItem("darkMode") === "true" || document.documentElement.classList.contains("dark");
    } catch (e) {
      return false;
    }
  });

  useEffect(() => {
    const onStorage = (e) => {
      if (e.key === "darkMode") {
        setIsDark(e.newValue === "true");
      }
    };
    window.addEventListener("storage", onStorage);
    // also observe class presence in case toggle doesn't use storage in some flows
    const observer = new MutationObserver(() => {
      setIsDark(document.documentElement.classList.contains("dark"));
    });
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ["class"] });

    return () => {
      window.removeEventListener("storage", onStorage);
      observer.disconnect();
    };
  }, []);

  const handleLogin = async (e) => {
    e.preventDefault();
    setError(null);
    setLoading(true);

    try {
      // Comptes de démonstration (inchangés)
      const demoAccounts = {
        "admin@moovup.com": {
          password: "admin123",
          user: { id: "1", email: "admin@moovup.com" },
          profile: { id: 1, name: "Super Admin", role: "SUPER_ADMIN" },
        },
        "manager.anais@gmail.com": {
          password: "manager.anais@gmail.com",
          user: { id: "2", email: "manager.anais@gmail.com" },
          profile: { id: 2, name: "Manager Anais", role: "MANAGER_ANAIS" },
        },
        "manager.evolve@gmail.com": {
          password: "manager.evolve@gmail.com",
          user: { id: "3", email: "manager.evolve@gmail.com" },
          profile: { id: 3, name: "Manager Evolve", role: "MANAGER_EVOLVE" },
        },
        "manager.populo@gmail.com": {
          password: "manager.populo@gmail.com",
          user: { id: "4", email: "manager.populo@gmail.com" },
          profile: { id: 4, name: "Manager Populo", role: "MANAGER_POPULO" },
        },
      };

      const account = demoAccounts[email];
      if (!account || account.password !== password) {
        setError("Email ou mot de passe incorrect");
        setLoading(false);
        return;
      }

      // Simuler une connexion
      await new Promise((resolve) => setTimeout(resolve, 900));
      localStorage.setItem("demoUser", JSON.stringify(account));
      window.location.reload();
    } catch (err) {
      setError("Erreur de connexion. Veuillez réessayer.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen relative bg-gradient-to-br from-purple-50 via-white to-pink-50 overflow-hidden flex flex-col">
      {/* Decorative layered blobs + subtle waves background */}
      <div className="absolute inset-0 z-0 overflow-hidden">
        {/* Large blurred blobs - increased opacity and reduced blur for visibility */}
        <div className="absolute -left-40 -top-40 w-96 h-96 bg-gradient-to-br from-purple-300 to-pink-300 rounded-full opacity-90 filter blur-2xl transform rotate-12" />
        <div className="absolute right-[-120px] top-24 w-80 h-80 bg-gradient-to-br from-pink-200 to-purple-200 rounded-full opacity-85 filter blur-xl" />
        <div className="absolute left-1/4 bottom-[-80px] w-96 h-96 bg-gradient-to-br from-purple-200 to-pink-150 rounded-full opacity-80 filter blur-xl" />

        {/* Subtle wave lines (SVG) - extended with more curves */}
        <svg
          className="absolute inset-0 w-full h-full pointer-events-none"
          xmlns="http://www.w3.org/2000/svg"
          preserveAspectRatio="none"
          viewBox="0 0 1200 800"
        >
          <path
            d="M0 260 C180 200 360 320 600 300 C840 280 980 240 1200 260"
            stroke="#EAD7FF"
            strokeWidth="3"
            fill="none"
            opacity="0.28"
          />
          <path
            d="M0 300 C200 220 400 380 600 320 C800 260 1000 360 1200 300"
            stroke="#E9D5FF"
            strokeWidth="2"
            fill="none"
            opacity="0.7"
          />
          <path
            d="M0 340 C150 300 350 260 600 300 C850 340 1050 300 1200 320"
            stroke="#F7CFEA"
            strokeWidth="2"
            fill="none"
            opacity="0.45"
          />
          <path
            d="M0 380 C240 320 420 360 600 360 C780 360 980 320 1200 340"
            stroke="#FAD8EB"
            strokeWidth="2"
            fill="none"
            opacity="0.6"
          />
          <path
            d="M0 420 C200 460 400 420 600 430 C800 440 1000 420 1200 430"
            stroke="#EED6FF"
            strokeWidth="1.5"
            fill="none"
            opacity="0.25"
          />
          <path
            d="M0 200 C220 160 420 180 600 200 C780 220 980 200 1200 220"
            stroke="#F6E7F6"
            strokeWidth="1.5"
            fill="none"
            opacity="0.22"
          />
        </svg>
      </div>

      {/* Navbar (styled) */}
      <header className="w-full py-6 relative">
        <div className="max-w-6xl mx-auto px-6 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 rounded-lg bg-gradient-to-br from-purple-600 to-pink-500 shadow-md flex items-center justify-center">
              <span className="text-white font-extrabold">M</span>
            </div>
            <div>
              <div className="text-sm font-medium text-gray-700">
                Welcome back
              </div>
              <div className="text-xs text-gray-400">Good to see you</div>
            </div>
          </div>
          <div className="flex items-center gap-4">
            {/* Dark mode toggle */}
            <DarkModeToggle />
            <div className="text-right">
              <div className="text-lg font-semibold text-indigo-900">
                MoovUp Admin
              </div>
              <div className="text-xs text-indigo-500">
                Management Dashboard
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="flex-1 flex items-center justify-center p-6">
        <div className="relative z-10 w-full max-w-4xl bg-white/90 backdrop-blur-sm rounded-2xl shadow-xl overflow-hidden grid grid-cols-1 md:grid-cols-2">
*** End File